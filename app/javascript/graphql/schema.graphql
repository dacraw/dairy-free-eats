type AutomaticTax {
  enabled: Boolean!
  liability: JSON
  status: String
}

"""
Based on https://docs.stripe.com/api/checkout/sessions/object
"""
type CheckoutSession {
  amountSubtotal: Int
  amountTotal: Int
  automaticTax: AutomaticTax!
  billingAddressCollection: String
  cancelUrl: String
  clientReferenceId: String
  created: ISO8601DateTime!
  currency: String
  customer: String
  customerDetails: CustomerDetails
  customerEmail: String
  id: String!
  lineItems: LineItemListObject!
  livemode: Boolean!
  locale: String
  metadata: JSON
  mode: String!
  paymentIntent: String
  paymentMethodCollection: String
  paymentMethodTypes: [String!]!
  paymentStatus: String!
  stripeObject: String!
  successUrl: String!
  totalDetails: TotalDetails!
  url: String!
}

"""
Autogenerated input type of CreateOrderMessage
"""
input CreateOrderMessageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createOrderMessageInputType: OrderMessageInput!
}

"""
Autogenerated return type of CreateOrderMessage.
"""
type CreateOrderMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: Error!
  orderMessage: OrderMessage
}

"""
Autogenerated return type of CurrentUserNotificationReceived.
"""
type CurrentUserNotificationReceivedPayload {
  notification: Notification
}

type CustomerAddress {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

type CustomerDetails {
  address: CustomerAddress
  email: String
  name: String
  phone: String
  taxExempt: String
  taxIds: [JSON!]
}

"""
Autogenerated input type of DemoAdminSessionCreate
"""
input DemoAdminSessionCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DemoAdminSessionCreate.
"""
type DemoAdminSessionCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]!
  user: User
}

"""
Generic error type
"""
type Error {
  message: String!
  path: [String!]
}

"""
Autogenerated input type of GenerateGeminiOrderMessage
"""
input GenerateGeminiOrderMessageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The order message ID that Gemini will be responding to
  """
  orderMessageId: ID!
}

"""
Autogenerated return type of GenerateGeminiOrderMessage.
"""
type GenerateGeminiOrderMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]!
  orderMessage: OrderMessage
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Represents untyped JSON
"""
scalar JSON

type LineItem {
  amountTotal: Int!
  description: String!
  id: String!
  quantity: Int!
  stripeObject: String!
}

type LineItemListObject {
  data: [LineItem!]
  hasMore: Boolean!
  stripeObject: String!
  url: String!
}

type Mutation {
  createOrderMessage(
    """
    Parameters for CreateOrderMessage
    """
    input: CreateOrderMessageInput!
  ): CreateOrderMessagePayload

  """
  Creates a new session
  """
  demoAdminSessionCreate(
    """
    Parameters for DemoAdminSessionCreate
    """
    input: DemoAdminSessionCreateInput!
  ): DemoAdminSessionCreatePayload
  generateGeminiOrderMessage(
    """
    Parameters for GenerateGeminiOrderMessage
    """
    input: GenerateGeminiOrderMessageInput!
  ): GenerateGeminiOrderMessagePayload
  setOrderStatus(
    """
    Parameters for SetOrderStatus
    """
    input: SetOrderStatusInput!
  ): SetOrderStatusPayload

  """
  Creates a new stripe_checkout_session
  """
  stripeCheckoutSessionCreate(
    """
    Parameters for StripeCheckoutSessionCreate
    """
    input: StripeCheckoutSessionCreateInput!
  ): StripeCheckoutSessionCreatePayload
}

type Notification {
  createdAt: ISO8601DateTime!
  id: ID!
  message: String!
  path: String
  updatedAt: ISO8601DateTime!
  userId: Int!
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge]

  """
  A list of nodes.
  """
  nodes: [Notification]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

type Order {
  amountTotal: Int!
  completedAt: String
  createdAt: String!
  guestEmail: String
  id: ID!
  status: OrderStatus!
  stripeCheckoutSessionLineItems: [OrderLineItem!]!
  stripePaymentIntentId: String!
  updatedAt: String!
  user: User
}

type OrderLineItem {
  imageUrl: String!
  name: String!
  quantity: Int!
  unitAmount: Int!
}

type OrderMessage {
  body: String
  createdAt: ISO8601DateTime!
  id: ID!
  orderId: ID!
  updatedAt: ISO8601DateTime!
  userId: ID!
  userIsAdmin: Boolean!
  userIsGemini: Boolean!
}

input OrderMessageInput {
  body: String!
  orderId: ID!
  userId: ID!
}

input OrderPageInput {
  price: String!
  quantity: Int
}

"""
Possible order statuses
"""
enum OrderStatus {
  """
  Active status means the order is being prepared
  """
  active

  """
  Order is cancelled and cannot be re-activated
  """
  cancelled

  """
  Order has been delivered successfully
  """
  completed

  """
  Order is being delivered to the customer
  """
  in_transit

  """
  Orders are set to received when first created, and are not being processed
  """
  received
}

input OrderStatusInput {
  id: ID!
  status: OrderStatus!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Product {
  createdAt: ISO8601DateTime!
  id: ID!
  stripeDefaultPriceId: String!
  stripeDescription: String!
  stripeImages: [String!]!
  stripeName: String!
  stripePriceUnitAmount: Int!
  stripeProductId: String!
  updatedAt: ISO8601DateTime!
}

type Query {
  currentUser: User
  currentUserNotifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NotificationConnection!
  currentUserOrders(incomplete: Boolean): [Order!]
  demoVideoPresignedUrl: String!
  fetchCheckoutSession(id: ID!): CheckoutSession
  order(id: ID!): Order
  orderMessages(orderId: ID!): [OrderMessage!]!
  orders: [Order!]
  products: [Product!]!
}

"""
Autogenerated input type of SetOrderStatus
"""
input SetOrderStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  setOrderStatusInputType: OrderStatusInput!
}

"""
Autogenerated return type of SetOrderStatus.
"""
type SetOrderStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: Order!
}

"""
Autogenerated input type of StripeCheckoutSessionCreate
"""
input StripeCheckoutSessionCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  stripeCheckoutSessionInput: StripeCheckoutSessionInput!
}

"""
Autogenerated return type of StripeCheckoutSessionCreate.
"""
type StripeCheckoutSessionCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]!
  stripeCheckoutSession: CheckoutSession
}

input StripeCheckoutSessionInput {
  lineItems: [OrderPageInput!]!
}

type Subscription {
  currentUserNotificationReceived: CurrentUserNotificationReceivedPayload
  orderMessageReceived(orderId: ID!): OrderMessage
}

type TotalDetails {
  amountDiscount: Int!
  amountShipping: Int!
  amountTax: Int!
}

type User {
  admin: Boolean!
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  stripeCustomerId: String
  updatedAt: ISO8601DateTime!
}
