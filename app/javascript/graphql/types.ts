import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
  /** Represents untyped JSON */
  JSON: { input: any; output: any; }
};

export type AutomaticTax = {
  __typename?: 'AutomaticTax';
  enabled: Scalars['Boolean']['output'];
  liability?: Maybe<Scalars['JSON']['output']>;
  status?: Maybe<Scalars['String']['output']>;
};

/** Based on https://docs.stripe.com/api/checkout/sessions/object */
export type CheckoutSession = {
  __typename?: 'CheckoutSession';
  amountSubtotal?: Maybe<Scalars['Int']['output']>;
  amountTotal?: Maybe<Scalars['Int']['output']>;
  automaticTax: AutomaticTax;
  billingAddressCollection?: Maybe<Scalars['String']['output']>;
  cancelUrl?: Maybe<Scalars['String']['output']>;
  clientReferenceId?: Maybe<Scalars['String']['output']>;
  created: Scalars['ISO8601DateTime']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  customer?: Maybe<Scalars['String']['output']>;
  customerDetails?: Maybe<CustomerDetails>;
  customerEmail?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  lineItems: LineItemListObject;
  livemode: Scalars['Boolean']['output'];
  locale?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<Scalars['JSON']['output']>;
  mode: Scalars['String']['output'];
  paymentIntent?: Maybe<Scalars['String']['output']>;
  paymentMethodCollection?: Maybe<Scalars['String']['output']>;
  paymentMethodTypes: Array<Scalars['String']['output']>;
  paymentStatus: Scalars['String']['output'];
  stripeObject: Scalars['String']['output'];
  successUrl: Scalars['String']['output'];
  totalDetails: TotalDetails;
  url: Scalars['String']['output'];
};

/** Autogenerated input type of CreateOrderMessage */
export type CreateOrderMessageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  createOrderMessageInputType: OrderMessageInput;
};

/** Autogenerated return type of CreateOrderMessage. */
export type CreateOrderMessagePayload = {
  __typename?: 'CreateOrderMessagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Error;
  orderMessage?: Maybe<OrderMessage>;
};

/** Autogenerated return type of CurrentUserNotificationReceived. */
export type CurrentUserNotificationReceivedPayload = {
  __typename?: 'CurrentUserNotificationReceivedPayload';
  notification?: Maybe<Notification>;
};

export type CustomerAddress = {
  __typename?: 'CustomerAddress';
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  line1?: Maybe<Scalars['String']['output']>;
  line2?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
};

export type CustomerDetails = {
  __typename?: 'CustomerDetails';
  address?: Maybe<CustomerAddress>;
  email?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  taxExempt?: Maybe<Scalars['String']['output']>;
  taxIds?: Maybe<Array<Scalars['JSON']['output']>>;
};

/** Autogenerated input type of DemoAdminSessionCreate */
export type DemoAdminSessionCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of DemoAdminSessionCreate. */
export type DemoAdminSessionCreatePayload = {
  __typename?: 'DemoAdminSessionCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Error>;
  user?: Maybe<User>;
};

/** Generic error type */
export type Error = {
  __typename?: 'Error';
  message: Scalars['String']['output'];
  path?: Maybe<Array<Scalars['String']['output']>>;
};

export type LineItem = {
  __typename?: 'LineItem';
  amountTotal: Scalars['Int']['output'];
  description: Scalars['String']['output'];
  id: Scalars['String']['output'];
  quantity: Scalars['Int']['output'];
  stripeObject: Scalars['String']['output'];
};

export type LineItemListObject = {
  __typename?: 'LineItemListObject';
  data?: Maybe<Array<LineItem>>;
  hasMore: Scalars['Boolean']['output'];
  stripeObject: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createOrderMessage?: Maybe<CreateOrderMessagePayload>;
  /** Creates a new session */
  demoAdminSessionCreate?: Maybe<DemoAdminSessionCreatePayload>;
  setOrderStatus?: Maybe<SetOrderStatusPayload>;
  /** Creates a new stripe_checkout_session */
  stripeCheckoutSessionCreate?: Maybe<StripeCheckoutSessionCreatePayload>;
};


export type MutationCreateOrderMessageArgs = {
  input: CreateOrderMessageInput;
};


export type MutationDemoAdminSessionCreateArgs = {
  input: DemoAdminSessionCreateInput;
};


export type MutationSetOrderStatusArgs = {
  input: SetOrderStatusInput;
};


export type MutationStripeCheckoutSessionCreateArgs = {
  input: StripeCheckoutSessionCreateInput;
};

export type Notification = {
  __typename?: 'Notification';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  message: Scalars['String']['output'];
  path?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  userId: Scalars['Int']['output'];
};

/** The connection type for Notification. */
export type NotificationConnection = {
  __typename?: 'NotificationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NotificationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Notification>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type NotificationEdge = {
  __typename?: 'NotificationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Notification>;
};

export type Order = {
  __typename?: 'Order';
  createdAt: Scalars['String']['output'];
  guestEmail?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  status: OrderStatus;
  stripeCheckoutSessionLineItems: Array<OrderLineItem>;
  stripePaymentIntentId: Scalars['String']['output'];
  updatedAt: Scalars['String']['output'];
  user?: Maybe<User>;
};

export type OrderLineItem = {
  __typename?: 'OrderLineItem';
  name: Scalars['String']['output'];
  quantity: Scalars['Int']['output'];
};

export type OrderMessage = {
  __typename?: 'OrderMessage';
  body?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  orderId: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  userId: Scalars['Int']['output'];
  userIsAdmin: Scalars['Boolean']['output'];
};

export type OrderMessageInput = {
  body: Scalars['String']['input'];
  orderId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};

export type OrderPageInput = {
  price: Scalars['String']['input'];
  quantity?: InputMaybe<Scalars['Int']['input']>;
};

/** Possible order statuses */
export enum OrderStatus {
  /** Active status means the order is being prepared */
  Active = 'active',
  /** Order is cancelled and cannot be re-activated */
  Cancelled = 'cancelled',
  /** Order has been delivered successfully */
  Completed = 'completed',
  /** Order is being delivered to the customer */
  InTransit = 'in_transit',
  /** Orders are set to received when first created, and are not being processed */
  Received = 'received'
}

export type OrderStatusInput = {
  id: Scalars['ID']['input'];
  status: OrderStatus;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Product = {
  __typename?: 'Product';
  active: Scalars['Boolean']['output'];
  attributes: Array<Maybe<Scalars['String']['output']>>;
  created: Scalars['ISO8601DateTime']['output'];
  defaultPrice: Scalars['String']['output'];
  description: Scalars['String']['output'];
  id: Scalars['String']['output'];
  images: Array<Maybe<Scalars['String']['output']>>;
  livemode: Scalars['Boolean']['output'];
  marketingFeatures: Scalars['JSON']['output'];
  metadata: Scalars['JSON']['output'];
  name: Scalars['String']['output'];
  packageDimensions?: Maybe<Scalars['JSON']['output']>;
  shippable?: Maybe<Scalars['Boolean']['output']>;
  statementDescriptor?: Maybe<Scalars['String']['output']>;
  stripeObject: Scalars['String']['output'];
  taxCode: Scalars['String']['output'];
  type: Scalars['String']['output'];
  unitLabel?: Maybe<Scalars['String']['output']>;
  updated: Scalars['ISO8601DateTime']['output'];
  url?: Maybe<Scalars['String']['output']>;
};

export type ProductListObject = {
  __typename?: 'ProductListObject';
  data?: Maybe<Array<Product>>;
  hasMore: Scalars['Boolean']['output'];
  stripeObject: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type Query = {
  __typename?: 'Query';
  currentUser?: Maybe<User>;
  currentUserNotifications: NotificationConnection;
  currentUserOrders?: Maybe<Array<Order>>;
  fetchCheckoutSession?: Maybe<CheckoutSession>;
  listProducts: ProductListObject;
  order?: Maybe<Order>;
  orderMessages: Array<OrderMessage>;
  orders?: Maybe<Array<Order>>;
  retrieveProduct?: Maybe<Product>;
};


export type QueryCurrentUserNotificationsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryCurrentUserOrdersArgs = {
  completed: Scalars['Boolean']['input'];
};


export type QueryFetchCheckoutSessionArgs = {
  id: Scalars['ID']['input'];
};


export type QueryOrderArgs = {
  id: Scalars['ID']['input'];
};


export type QueryOrderMessagesArgs = {
  orderId: Scalars['ID']['input'];
};


export type QueryRetrieveProductArgs = {
  productId: Scalars['String']['input'];
};

/** Autogenerated input type of SetOrderStatus */
export type SetOrderStatusInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  setOrderStatusInputType: OrderStatusInput;
};

/** Autogenerated return type of SetOrderStatus. */
export type SetOrderStatusPayload = {
  __typename?: 'SetOrderStatusPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  order: Order;
};

/** Autogenerated input type of StripeCheckoutSessionCreate */
export type StripeCheckoutSessionCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  stripeCheckoutSessionInput: StripeCheckoutSessionInput;
};

/** Autogenerated return type of StripeCheckoutSessionCreate. */
export type StripeCheckoutSessionCreatePayload = {
  __typename?: 'StripeCheckoutSessionCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Error>;
  stripeCheckoutSession?: Maybe<CheckoutSession>;
};

export type StripeCheckoutSessionInput = {
  lineItems: Array<OrderPageInput>;
};

export type Subscription = {
  __typename?: 'Subscription';
  currentUserNotificationReceived?: Maybe<CurrentUserNotificationReceivedPayload>;
};

export type TotalDetails = {
  __typename?: 'TotalDetails';
  amountDiscount: Scalars['Int']['output'];
  amountShipping: Scalars['Int']['output'];
  amountTax: Scalars['Int']['output'];
};

export type User = {
  __typename?: 'User';
  admin: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  stripeCustomerId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetProductsQuery = { __typename?: 'Query', listProducts: { __typename?: 'ProductListObject', stripeObject: string, hasMore: boolean, url: string, data?: Array<{ __typename?: 'Product', defaultPrice: string, description: string, name: string }> | null } };

export type StripeCheckoutSessionCreateMutationVariables = Exact<{
  input: StripeCheckoutSessionCreateInput;
}>;


export type StripeCheckoutSessionCreateMutation = { __typename?: 'Mutation', stripeCheckoutSessionCreate?: { __typename?: 'StripeCheckoutSessionCreatePayload', stripeCheckoutSession?: { __typename?: 'CheckoutSession', url: string } | null, errors: Array<{ __typename?: 'Error', message: string }> } | null };

export type FetchOrderQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type FetchOrderQuery = { __typename?: 'Query', order?: { __typename?: 'Order', id: string, status: OrderStatus, stripePaymentIntentId: string, createdAt: string, updatedAt: string, guestEmail?: string | null, user?: { __typename?: 'User', id: string, email: string } | null, stripeCheckoutSessionLineItems: Array<{ __typename?: 'OrderLineItem', name: string, quantity: number }> } | null };

export type SetOrderStatusMutationVariables = Exact<{
  input: SetOrderStatusInput;
}>;


export type SetOrderStatusMutation = { __typename?: 'Mutation', setOrderStatus?: { __typename?: 'SetOrderStatusPayload', order: { __typename?: 'Order', id: string, status: OrderStatus } } | null };

export type FetchOrdersQueryVariables = Exact<{ [key: string]: never; }>;


export type FetchOrdersQuery = { __typename?: 'Query', orders?: Array<{ __typename?: 'Order', id: string, status: OrderStatus, guestEmail?: string | null, stripeCheckoutSessionLineItems: Array<{ __typename?: 'OrderLineItem', name: string, quantity: number }>, user?: { __typename?: 'User', id: string, email: string } | null }> | null };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename?: 'Query', currentUser?: { __typename?: 'User', id: string, email: string, admin: boolean } | null };

export type FetchCurrentUserNotificationsQueryVariables = Exact<{
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type FetchCurrentUserNotificationsQuery = { __typename?: 'Query', currentUserNotifications: { __typename?: 'NotificationConnection', edges?: Array<{ __typename?: 'NotificationEdge', node?: { __typename?: 'Notification', id: string, message: string, path?: string | null } | null } | null> | null, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null } } };

export type CurrentUserNotificationReceivedSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserNotificationReceivedSubscription = { __typename?: 'Subscription', currentUserNotificationReceived?: { __typename?: 'CurrentUserNotificationReceivedPayload', notification?: { __typename?: 'Notification', id: string, message: string, userId: number, path?: string | null } | null } | null };

export type FetchOrderMessagesQueryVariables = Exact<{
  orderId: Scalars['ID']['input'];
}>;


export type FetchOrderMessagesQuery = { __typename?: 'Query', orderMessages: Array<{ __typename?: 'OrderMessage', id: string, body?: string | null, createdAt: any, userId: number, userIsAdmin: boolean }> };

export type CreateOrderMessageMutationVariables = Exact<{
  input: CreateOrderMessageInput;
}>;


export type CreateOrderMessageMutation = { __typename?: 'Mutation', createOrderMessage?: { __typename?: 'CreateOrderMessagePayload', orderMessage?: { __typename?: 'OrderMessage', id: string } | null } | null };

export type FetchCurrentUserOrdersQueryVariables = Exact<{
  completed: Scalars['Boolean']['input'];
}>;


export type FetchCurrentUserOrdersQuery = { __typename?: 'Query', currentUserOrders?: Array<{ __typename?: 'Order', id: string, status: OrderStatus, guestEmail?: string | null, stripeCheckoutSessionLineItems: Array<{ __typename?: 'OrderLineItem', name: string, quantity: number }>, user?: { __typename?: 'User', id: string, email: string } | null }> | null };

export type FetchStripeCheckoutSessionQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type FetchStripeCheckoutSessionQuery = { __typename?: 'Query', fetchCheckoutSession?: { __typename?: 'CheckoutSession', id: string, amountTotal?: number | null, lineItems: { __typename?: 'LineItemListObject', hasMore: boolean, data?: Array<{ __typename?: 'LineItem', id: string, amountTotal: number, description: string, quantity: number }> | null } } | null };


export const GetProductsDocument = gql`
    query GetProducts {
  listProducts {
    stripeObject
    hasMore
    url
    data {
      defaultPrice
      description
      name
    }
  }
}
    `;

/**
 * __useGetProductsQuery__
 *
 * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, options);
      }
export function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, options);
        }
export function useGetProductsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, options);
        }
export type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;
export type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;
export type GetProductsSuspenseQueryHookResult = ReturnType<typeof useGetProductsSuspenseQuery>;
export type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;
export const StripeCheckoutSessionCreateDocument = gql`
    mutation StripeCheckoutSessionCreate($input: StripeCheckoutSessionCreateInput!) {
  stripeCheckoutSessionCreate(input: $input) {
    stripeCheckoutSession {
      url
    }
    errors {
      message
    }
  }
}
    `;
export type StripeCheckoutSessionCreateMutationFn = Apollo.MutationFunction<StripeCheckoutSessionCreateMutation, StripeCheckoutSessionCreateMutationVariables>;

/**
 * __useStripeCheckoutSessionCreateMutation__
 *
 * To run a mutation, you first call `useStripeCheckoutSessionCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStripeCheckoutSessionCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [stripeCheckoutSessionCreateMutation, { data, loading, error }] = useStripeCheckoutSessionCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useStripeCheckoutSessionCreateMutation(baseOptions?: Apollo.MutationHookOptions<StripeCheckoutSessionCreateMutation, StripeCheckoutSessionCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<StripeCheckoutSessionCreateMutation, StripeCheckoutSessionCreateMutationVariables>(StripeCheckoutSessionCreateDocument, options);
      }
export type StripeCheckoutSessionCreateMutationHookResult = ReturnType<typeof useStripeCheckoutSessionCreateMutation>;
export type StripeCheckoutSessionCreateMutationResult = Apollo.MutationResult<StripeCheckoutSessionCreateMutation>;
export type StripeCheckoutSessionCreateMutationOptions = Apollo.BaseMutationOptions<StripeCheckoutSessionCreateMutation, StripeCheckoutSessionCreateMutationVariables>;
export const FetchOrderDocument = gql`
    query FetchOrder($id: ID!) {
  order(id: $id) {
    id
    user {
      id
      email
    }
    status
    stripePaymentIntentId
    createdAt
    updatedAt
    stripeCheckoutSessionLineItems {
      name
      quantity
    }
    guestEmail
  }
}
    `;

/**
 * __useFetchOrderQuery__
 *
 * To run a query within a React component, call `useFetchOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchOrderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFetchOrderQuery(baseOptions: Apollo.QueryHookOptions<FetchOrderQuery, FetchOrderQueryVariables> & ({ variables: FetchOrderQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FetchOrderQuery, FetchOrderQueryVariables>(FetchOrderDocument, options);
      }
export function useFetchOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchOrderQuery, FetchOrderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FetchOrderQuery, FetchOrderQueryVariables>(FetchOrderDocument, options);
        }
export function useFetchOrderSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FetchOrderQuery, FetchOrderQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FetchOrderQuery, FetchOrderQueryVariables>(FetchOrderDocument, options);
        }
export type FetchOrderQueryHookResult = ReturnType<typeof useFetchOrderQuery>;
export type FetchOrderLazyQueryHookResult = ReturnType<typeof useFetchOrderLazyQuery>;
export type FetchOrderSuspenseQueryHookResult = ReturnType<typeof useFetchOrderSuspenseQuery>;
export type FetchOrderQueryResult = Apollo.QueryResult<FetchOrderQuery, FetchOrderQueryVariables>;
export const SetOrderStatusDocument = gql`
    mutation SetOrderStatus($input: SetOrderStatusInput!) {
  setOrderStatus(input: $input) {
    order {
      id
      status
    }
  }
}
    `;
export type SetOrderStatusMutationFn = Apollo.MutationFunction<SetOrderStatusMutation, SetOrderStatusMutationVariables>;

/**
 * __useSetOrderStatusMutation__
 *
 * To run a mutation, you first call `useSetOrderStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetOrderStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setOrderStatusMutation, { data, loading, error }] = useSetOrderStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSetOrderStatusMutation(baseOptions?: Apollo.MutationHookOptions<SetOrderStatusMutation, SetOrderStatusMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetOrderStatusMutation, SetOrderStatusMutationVariables>(SetOrderStatusDocument, options);
      }
export type SetOrderStatusMutationHookResult = ReturnType<typeof useSetOrderStatusMutation>;
export type SetOrderStatusMutationResult = Apollo.MutationResult<SetOrderStatusMutation>;
export type SetOrderStatusMutationOptions = Apollo.BaseMutationOptions<SetOrderStatusMutation, SetOrderStatusMutationVariables>;
export const FetchOrdersDocument = gql`
    query FetchOrders {
  orders {
    id
    status
    stripeCheckoutSessionLineItems {
      name
      quantity
    }
    user {
      id
      email
    }
    guestEmail
  }
}
    `;

/**
 * __useFetchOrdersQuery__
 *
 * To run a query within a React component, call `useFetchOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchOrdersQuery({
 *   variables: {
 *   },
 * });
 */
export function useFetchOrdersQuery(baseOptions?: Apollo.QueryHookOptions<FetchOrdersQuery, FetchOrdersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FetchOrdersQuery, FetchOrdersQueryVariables>(FetchOrdersDocument, options);
      }
export function useFetchOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchOrdersQuery, FetchOrdersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FetchOrdersQuery, FetchOrdersQueryVariables>(FetchOrdersDocument, options);
        }
export function useFetchOrdersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FetchOrdersQuery, FetchOrdersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FetchOrdersQuery, FetchOrdersQueryVariables>(FetchOrdersDocument, options);
        }
export type FetchOrdersQueryHookResult = ReturnType<typeof useFetchOrdersQuery>;
export type FetchOrdersLazyQueryHookResult = ReturnType<typeof useFetchOrdersLazyQuery>;
export type FetchOrdersSuspenseQueryHookResult = ReturnType<typeof useFetchOrdersSuspenseQuery>;
export type FetchOrdersQueryResult = Apollo.QueryResult<FetchOrdersQuery, FetchOrdersQueryVariables>;
export const CurrentUserDocument = gql`
    query CurrentUser {
  currentUser {
    id
    email
    admin
  }
}
    `;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
      }
export function useCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export function useCurrentUserSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;
export type CurrentUserSuspenseQueryHookResult = ReturnType<typeof useCurrentUserSuspenseQuery>;
export type CurrentUserQueryResult = Apollo.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;
export const FetchCurrentUserNotificationsDocument = gql`
    query FetchCurrentUserNotifications($after: String, $first: Int) {
  currentUserNotifications(after: $after, first: $first) {
    edges {
      node {
        id
        message
        path
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useFetchCurrentUserNotificationsQuery__
 *
 * To run a query within a React component, call `useFetchCurrentUserNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchCurrentUserNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchCurrentUserNotificationsQuery({
 *   variables: {
 *      after: // value for 'after'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useFetchCurrentUserNotificationsQuery(baseOptions?: Apollo.QueryHookOptions<FetchCurrentUserNotificationsQuery, FetchCurrentUserNotificationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FetchCurrentUserNotificationsQuery, FetchCurrentUserNotificationsQueryVariables>(FetchCurrentUserNotificationsDocument, options);
      }
export function useFetchCurrentUserNotificationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchCurrentUserNotificationsQuery, FetchCurrentUserNotificationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FetchCurrentUserNotificationsQuery, FetchCurrentUserNotificationsQueryVariables>(FetchCurrentUserNotificationsDocument, options);
        }
export function useFetchCurrentUserNotificationsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FetchCurrentUserNotificationsQuery, FetchCurrentUserNotificationsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FetchCurrentUserNotificationsQuery, FetchCurrentUserNotificationsQueryVariables>(FetchCurrentUserNotificationsDocument, options);
        }
export type FetchCurrentUserNotificationsQueryHookResult = ReturnType<typeof useFetchCurrentUserNotificationsQuery>;
export type FetchCurrentUserNotificationsLazyQueryHookResult = ReturnType<typeof useFetchCurrentUserNotificationsLazyQuery>;
export type FetchCurrentUserNotificationsSuspenseQueryHookResult = ReturnType<typeof useFetchCurrentUserNotificationsSuspenseQuery>;
export type FetchCurrentUserNotificationsQueryResult = Apollo.QueryResult<FetchCurrentUserNotificationsQuery, FetchCurrentUserNotificationsQueryVariables>;
export const CurrentUserNotificationReceivedDocument = gql`
    subscription CurrentUserNotificationReceived {
  currentUserNotificationReceived {
    notification {
      id
      message
      userId
      path
    }
  }
}
    `;

/**
 * __useCurrentUserNotificationReceivedSubscription__
 *
 * To run a query within a React component, call `useCurrentUserNotificationReceivedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserNotificationReceivedSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserNotificationReceivedSubscription({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserNotificationReceivedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<CurrentUserNotificationReceivedSubscription, CurrentUserNotificationReceivedSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useSubscription<CurrentUserNotificationReceivedSubscription, CurrentUserNotificationReceivedSubscriptionVariables>(CurrentUserNotificationReceivedDocument, options);
      }
export type CurrentUserNotificationReceivedSubscriptionHookResult = ReturnType<typeof useCurrentUserNotificationReceivedSubscription>;
export type CurrentUserNotificationReceivedSubscriptionResult = Apollo.SubscriptionResult<CurrentUserNotificationReceivedSubscription>;
export const FetchOrderMessagesDocument = gql`
    query FetchOrderMessages($orderId: ID!) {
  orderMessages(orderId: $orderId) {
    id
    body
    createdAt
    userId
    userIsAdmin
  }
}
    `;

/**
 * __useFetchOrderMessagesQuery__
 *
 * To run a query within a React component, call `useFetchOrderMessagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchOrderMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchOrderMessagesQuery({
 *   variables: {
 *      orderId: // value for 'orderId'
 *   },
 * });
 */
export function useFetchOrderMessagesQuery(baseOptions: Apollo.QueryHookOptions<FetchOrderMessagesQuery, FetchOrderMessagesQueryVariables> & ({ variables: FetchOrderMessagesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FetchOrderMessagesQuery, FetchOrderMessagesQueryVariables>(FetchOrderMessagesDocument, options);
      }
export function useFetchOrderMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchOrderMessagesQuery, FetchOrderMessagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FetchOrderMessagesQuery, FetchOrderMessagesQueryVariables>(FetchOrderMessagesDocument, options);
        }
export function useFetchOrderMessagesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FetchOrderMessagesQuery, FetchOrderMessagesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FetchOrderMessagesQuery, FetchOrderMessagesQueryVariables>(FetchOrderMessagesDocument, options);
        }
export type FetchOrderMessagesQueryHookResult = ReturnType<typeof useFetchOrderMessagesQuery>;
export type FetchOrderMessagesLazyQueryHookResult = ReturnType<typeof useFetchOrderMessagesLazyQuery>;
export type FetchOrderMessagesSuspenseQueryHookResult = ReturnType<typeof useFetchOrderMessagesSuspenseQuery>;
export type FetchOrderMessagesQueryResult = Apollo.QueryResult<FetchOrderMessagesQuery, FetchOrderMessagesQueryVariables>;
export const CreateOrderMessageDocument = gql`
    mutation CreateOrderMessage($input: CreateOrderMessageInput!) {
  createOrderMessage(input: $input) {
    orderMessage {
      id
    }
  }
}
    `;
export type CreateOrderMessageMutationFn = Apollo.MutationFunction<CreateOrderMessageMutation, CreateOrderMessageMutationVariables>;

/**
 * __useCreateOrderMessageMutation__
 *
 * To run a mutation, you first call `useCreateOrderMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrderMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrderMessageMutation, { data, loading, error }] = useCreateOrderMessageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrderMessageMutation(baseOptions?: Apollo.MutationHookOptions<CreateOrderMessageMutation, CreateOrderMessageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateOrderMessageMutation, CreateOrderMessageMutationVariables>(CreateOrderMessageDocument, options);
      }
export type CreateOrderMessageMutationHookResult = ReturnType<typeof useCreateOrderMessageMutation>;
export type CreateOrderMessageMutationResult = Apollo.MutationResult<CreateOrderMessageMutation>;
export type CreateOrderMessageMutationOptions = Apollo.BaseMutationOptions<CreateOrderMessageMutation, CreateOrderMessageMutationVariables>;
export const FetchCurrentUserOrdersDocument = gql`
    query FetchCurrentUserOrders($completed: Boolean!) {
  currentUserOrders(completed: $completed) {
    id
    status
    stripeCheckoutSessionLineItems {
      name
      quantity
    }
    user {
      id
      email
    }
    guestEmail
  }
}
    `;

/**
 * __useFetchCurrentUserOrdersQuery__
 *
 * To run a query within a React component, call `useFetchCurrentUserOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchCurrentUserOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchCurrentUserOrdersQuery({
 *   variables: {
 *      completed: // value for 'completed'
 *   },
 * });
 */
export function useFetchCurrentUserOrdersQuery(baseOptions: Apollo.QueryHookOptions<FetchCurrentUserOrdersQuery, FetchCurrentUserOrdersQueryVariables> & ({ variables: FetchCurrentUserOrdersQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FetchCurrentUserOrdersQuery, FetchCurrentUserOrdersQueryVariables>(FetchCurrentUserOrdersDocument, options);
      }
export function useFetchCurrentUserOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchCurrentUserOrdersQuery, FetchCurrentUserOrdersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FetchCurrentUserOrdersQuery, FetchCurrentUserOrdersQueryVariables>(FetchCurrentUserOrdersDocument, options);
        }
export function useFetchCurrentUserOrdersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FetchCurrentUserOrdersQuery, FetchCurrentUserOrdersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FetchCurrentUserOrdersQuery, FetchCurrentUserOrdersQueryVariables>(FetchCurrentUserOrdersDocument, options);
        }
export type FetchCurrentUserOrdersQueryHookResult = ReturnType<typeof useFetchCurrentUserOrdersQuery>;
export type FetchCurrentUserOrdersLazyQueryHookResult = ReturnType<typeof useFetchCurrentUserOrdersLazyQuery>;
export type FetchCurrentUserOrdersSuspenseQueryHookResult = ReturnType<typeof useFetchCurrentUserOrdersSuspenseQuery>;
export type FetchCurrentUserOrdersQueryResult = Apollo.QueryResult<FetchCurrentUserOrdersQuery, FetchCurrentUserOrdersQueryVariables>;
export const FetchStripeCheckoutSessionDocument = gql`
    query FetchStripeCheckoutSession($id: ID!) {
  fetchCheckoutSession(id: $id) {
    id
    amountTotal
    lineItems {
      hasMore
      data {
        id
        amountTotal
        description
        quantity
      }
    }
  }
}
    `;

/**
 * __useFetchStripeCheckoutSessionQuery__
 *
 * To run a query within a React component, call `useFetchStripeCheckoutSessionQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchStripeCheckoutSessionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchStripeCheckoutSessionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFetchStripeCheckoutSessionQuery(baseOptions: Apollo.QueryHookOptions<FetchStripeCheckoutSessionQuery, FetchStripeCheckoutSessionQueryVariables> & ({ variables: FetchStripeCheckoutSessionQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FetchStripeCheckoutSessionQuery, FetchStripeCheckoutSessionQueryVariables>(FetchStripeCheckoutSessionDocument, options);
      }
export function useFetchStripeCheckoutSessionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchStripeCheckoutSessionQuery, FetchStripeCheckoutSessionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FetchStripeCheckoutSessionQuery, FetchStripeCheckoutSessionQueryVariables>(FetchStripeCheckoutSessionDocument, options);
        }
export function useFetchStripeCheckoutSessionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FetchStripeCheckoutSessionQuery, FetchStripeCheckoutSessionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<FetchStripeCheckoutSessionQuery, FetchStripeCheckoutSessionQueryVariables>(FetchStripeCheckoutSessionDocument, options);
        }
export type FetchStripeCheckoutSessionQueryHookResult = ReturnType<typeof useFetchStripeCheckoutSessionQuery>;
export type FetchStripeCheckoutSessionLazyQueryHookResult = ReturnType<typeof useFetchStripeCheckoutSessionLazyQuery>;
export type FetchStripeCheckoutSessionSuspenseQueryHookResult = ReturnType<typeof useFetchStripeCheckoutSessionSuspenseQuery>;
export type FetchStripeCheckoutSessionQueryResult = Apollo.QueryResult<FetchStripeCheckoutSessionQuery, FetchStripeCheckoutSessionQueryVariables>;